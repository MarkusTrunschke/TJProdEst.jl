var documenterSearchIndex = {"docs":
[{"location":"#TJProdEst","page":"Home","title":"TJProdEst","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TJProdEst.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#TJProdEst.Results","page":"Home","title":"TJProdEst.Results","text":"Results\n\nA struct to store the outcome of a computation or experiment. \n\nFields\n\npoint_estimates::NamedTuple: A tuple containing the point estimates of the model.\nstd_errors::NamedTuple: A tuple containing the standard errors of the model.\nconf_intervals::NamedTuple: A tuple containing the confidence intervals of the model.\n\n\n\n\n\n","category":"type"},{"location":"#TJProdEst.Setup","page":"Home","title":"TJProdEst.Setup","text":"Setup\n\nA struct to hold the setup/configuration for the estimation procedure.\n\nFields\n\ndata::DataFrame: The input data for the estimation.\noutput::Symbol: The output (dependent) variable.\nflexible_input::Vector{Symbol}: A vector of flexible input variable symbols.\nfixed_inputs::Vector{Symbol}: A vector of fixed input variable symbols.\nflexible_input_price::Symbol: The price variable for the flexible input.\noutput_price::Symbol: The price variable for the output.\nω_lom_degree::Int: The degree for the ω_lom polynomial.\ntime_var::Union{Symbol, Missing}: The time variable, if applicable.\nfirm_id::Union{Symbol, Missing}: The firm identifier variable, if applicable.\noptions::Dict{Symbol, Any}: A dictionary of additional options for the estimation.\n\n\n\n\n\n","category":"type"},{"location":"#TJProdEst.res_struct_init-Tuple{TJProdEst.Setup}","page":"Home","title":"TJProdEst.res_struct_init","text":"res_struct_init(Setup::Setup) -> Results\n\nInitializes and returns a new Results object with the specified fields.\n\nArguments\n\nSetup::Setup: The setup struct containing all necessary parameters.\n\nReturns\n\nResults: A newly created result structure initialized with the given fields.\n\n\n\n\n\n","category":"method"},{"location":"#TJProdEst.setup_struct_init-Tuple{DataFrame, Symbol, Vector{Symbol}, Vector{Symbol}, Symbol, Symbol, Int64, Union{Missing, Symbol}, Union{Missing, Symbol}, String, Dict{Symbol, Any}}","page":"Home","title":"TJProdEst.setup_struct_init","text":"setup_struct_init(data, output, flexible_input, fixed_inputs, flexible_input_price,\n                  output_price, ω_lom_degree, time, id, prd_fnc_form, options) -> Setup\n\nConstruct a Setup object that consolidates all inputs and options required by the estimator. This helper normalizes input lists (it builds all_inputs by concatenating flexible_input and fixed_inputs) and packages arguments into the Setup struct used by the rest of the codebase.\n\nArguments\n\ndata::DataFrame: the input dataset.\noutput::Symbol: dependent variable (output) column name.\nflexible_input::Vector{Symbol}: vector of flexible input column names.\nfixed_inputs::Vector{Symbol}: vector of fixed input column names.\nflexible_input_price::Symbol: price variable for the flexible input.\noutput_price::Symbol: price variable for the output.\nω_lom_degree::Int: degree for the ω polynomial (order of LOM terms).\ntime::Union{Symbol, Missing}: time variable column (or missing).\nid::Union{Symbol, Missing}: firm identifier column (or missing).\nprd_fnc_form::String: production function form (e.g. \"CobbDouglas\").\noptions::Dict{Symbol,Any}: extra options passed to the estimator.\n\nReturns\n\nSetup: a filled Setup struct ready to be used by the estimation routine.\n\nExample\n\nsetup = setup_struct_init(df, :Y, [:M], [:K,:L], :Pᴹ, :Pʸ, 1, :year, :ID, \"CobbDouglas\", Dict())\n\n\n\n\n\n","category":"method"},{"location":"#TJProdEst.superscript_this!-Tuple{String}","page":"Home","title":"TJProdEst.superscript_this!","text":"Function that returns the superscript of the corresponding input character (b/c Julia does not have a simple function for that)\n\n\n\n\n\n","category":"method"},{"location":"#TJProdEst.tj_prod_est-Tuple{}","page":"Home","title":"TJProdEst.tj_prod_est","text":"tj_prod_est(; data, output, flexible_input, fixed_inputs, flexible_input_price, output_price, ω_lom_degree=1, time, id, options=Dict())\n\nTop-level estimation entry. This function orchestrates setup and result initialization for the production function estimation and returns a tuple (results, setup) where results is a Results object and setup is a Setup object containing the inputs and options.\n\nKeyword arguments\n\ndata::DataFrame: input dataset\noutput::Symbol: dependent variable column name\nflexible_input::Vector{Symbol}: names of flexible input variables\nfixed_inputs::Vector{Symbol}: names of fixed input variables\nflexible_input_price::Symbol: price variable for the flexible input\noutput_price::Symbol: price variable for the output\nω_lom_degree::Int=1: degree for the ω series terms (default: 1)\ntime::Symbol: time variable column name\nid::Symbol: firm identifier column name\noptions::Dict{Symbol,Any}=Dict(): additional options passed to the estimator\n\nReturns\n\n(results::Results, setup::Setup)\n\nExamples\n\nusing DataFrames\ndf = DataFrame(Y = rand(100), K = rand(100), L = rand(100), M = rand(100))\nresults, setup = tj_prod_est(data = df,\n                            output = :Y,\n                            flexible_input = [:M],\n                            fixed_inputs = [:K, :L],\n                            flexible_input_price = :Pᴹ,\n                            output_price = :Pʸ,\n                            ω_lom_degree = 1,\n                            time = :year,\n                            id = :firm,\n                            options = Dict())\n\n\n\n\n\n","category":"method"}]
}
